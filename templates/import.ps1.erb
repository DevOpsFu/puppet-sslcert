$pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2

$cert = gi <%= @location %>/<%= @name %>

switch -regex ($cert.Extension.ToUpper()) {
    ".CER|.DER|.P12" {
        $pfx.import("<%= @location %>\\<%= @name %>","<%= @password %>","Exportable,PersistKeySet,MachineKeySet")
    }
    ".CRT" {
        $pfx.Import([System.IO.File]::ReadAllBytes("<%= @location %>\\<%= @name %>"))
    }
    ".P7B|.SST" {
        $pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
        $pfx.Import([System.IO.File]::ReadAllBytes("<%= @location %>\\<%= @name %>"))
    }
    ".PFX" {
        $pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
        $pfx.import("<%= @location %>\\<%= @name %>","<%= @password %>","Exportable,PersistKeySet,MachineKeySet")
    }
}

$store = new-object System.Security.Cryptography.X509Certificates.X509Store("<%= @store_dir %>","<%= @root_store %>")
$store.open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)

$intermediatestore = new-object System.Security.Cryptography.X509Certificates.X509Store("CA","<%= @root_store %>")
$intermediatestore.open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)

# Look for existing installed certificates that might need replacement, based of same CA
$installedCerts = @(Get-ChildItem -R cert:\<%= @root_store %>\<%= @store_dir %>)

foreach($cert in $pfx) {

  foreach($installedCert in $installedCerts) {
     if (($($installedCert.Subject.Split(', ')[0]) -eq $($cert.Subject.Split(', ')[0])) -and ($installedCert.Thumbprint -ne $cert.Thumbprint ) ) {
        Remove-Item -R "cert:\<%= @root_store %>\<%= @store_dir %>\$($installedCert.Thumbprint)"
     }
  }

  if($cert.Thumbprint -ne "<%= @thumbprint %>") {
      $intermediatestore.Add($cert)
  }
  else {
      $store.Add($cert)
  }
}



$store.close()
